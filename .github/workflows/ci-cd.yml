name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  FLUTTER_VERSION: '3.19.0'
  JAVA_VERSION: '17'

jobs:
  # Static Analysis and Testing
  test:
    name: Tests & Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate code (mocks, etc.)
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
      
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
      
    - name: Analyze project source
      run: flutter analyze --fatal-infos --fatal-warnings
      
    - name: Run unit tests
      run: flutter test --coverage --reporter=expanded
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        flags: unittests
        name: mood-tracker-coverage
        
    - name: Check test coverage threshold
      run: |
        COVERAGE=$(flutter test --coverage | grep -o 'lines.*: [0-9.]*%' | grep -o '[0-9.]*' | head -1)
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below 80% threshold"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets 80% threshold"
        fi

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Start iOS Simulator
      uses: futureware-tech/simulator-action@v3
      with:
        model: 'iPhone 15'
        
    - name: Run integration tests
      run: flutter test integration_test/
      
  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run pub audit for vulnerabilities
      run: flutter pub audit
      
    - name: Check for hardcoded secrets
      run: |
        # Check for potential secrets in code
        if grep -r -i "api.key\|secret\|password\|token" lib/ --exclude-dir=.git; then
          echo "❌ Potential secrets found in code"
          exit 1
        else
          echo "✅ No hardcoded secrets detected"
        fi

  # Build Android APK
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Setup Firebase config (dummy for CI)
      run: |
        # Create dummy Firebase config for build
        cp android/app/google-services.json.example android/app/google-services.json
        
    - name: Build APK
      run: flutter build apk --release --build-name=${{ github.run_number }} --build-number=${{ github.run_number }}
      
    - name: Build App Bundle
      run: flutter build appbundle --release --build-name=${{ github.run_number }} --build-number=${{ github.run_number }}
      
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: mood-tracker-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        
    - name: Upload App Bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: mood-tracker-aab
        path: build/app/outputs/bundle/release/app-release.aab

  # Build iOS
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [test, security]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Setup Firebase config (dummy for CI)
      run: |
        # Create dummy Firebase config for build
        cp ios/Runner/GoogleService-Info.plist.example ios/Runner/GoogleService-Info.plist
        
    - name: Build iOS (no sign)
      run: flutter build ios --release --no-codesign --build-name=${{ github.run_number }} --build-number=${{ github.run_number }}

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Analyze bundle size
      run: |
        flutter build apk --analyze-size --target-platform android-arm64
        
    - name: Check app size limits
      run: |
        APK_SIZE=$(stat -c%s build/app/outputs/flutter-apk/app-release.apk)
        MAX_SIZE=$((50 * 1024 * 1024)) # 50MB limit
        
        if [ $APK_SIZE -gt $MAX_SIZE ]; then
          echo "❌ APK size $(($APK_SIZE / 1024 / 1024))MB exceeds 50MB limit"
          exit 1
        else
          echo "✅ APK size $(($APK_SIZE / 1024 / 1024))MB is within limits"
        fi

  # Deploy to Firebase App Distribution (for releases)
  deploy-beta:
    name: Deploy Beta
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Android APK
      uses: actions/download-artifact@v4
      with:
        name: mood-tracker-apk
        path: ./
        
    - name: Deploy to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_APP_ID }}
        serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        groups: testers
        file: app-release.apk
        releaseNotes: |
          Release ${{ github.event.release.tag_name }}
          
          ${{ github.event.release.body }}

  # Notify on workflow completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, build-android, build-ios]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.test.result == 'success' && needs.build-android.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        
    - name: Notify Failure
      if: ${{ needs.test.result == 'failure' || needs.build-android.result == 'failure' || needs.build-ios.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs."
        exit 1